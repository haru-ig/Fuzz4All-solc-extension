pragma solidity ^0.8.0;
 contract Array { function findMinNum(uint256 arr[]) pure public returns (uint256){uint256 min=arr[0];uint256 minIndex=0;for(uint256 i=1;i<arr.length;i++){if(arr[i]<arr[min]){min=arr[i];minIndex=i;}}return min; } function findMaxNum(uint256 arr[]) pure public returns (uint256){uint256 max=arr[0];uint256 maxIndex=0;for(uint256 i=1;i<arr.length;i++){if(arr[i]>arr[max]){max=arr[i];maxIndex=i;}}return max; } function findSum(uint256 arr[]) pure public returns (uint256){uint256 sum=0;for(uint256 i=0;i<arr.length;i++){sum+=arr[i];}return sum; } function setArr(uint256[] memory arr, uint256 count, uint256 value){for(uint256 i=count;i<arr.length;i++){arr[i]=value;}} function getArr(uint256 arr[], uint256 startIndex, uint256 count) pure public returns (uint256[][] memory){uint256[][] memory arr2=new uint256[count][1];for(uint256 j=0;j<count;j++){arr2[j][0]=arr[startIndex+j];}return arr2;} }

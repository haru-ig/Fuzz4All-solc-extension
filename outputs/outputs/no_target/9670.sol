pragma solidity ^0.8.0;
contract SafeMath { function add(uint x, uint y) internal pure returns (uint z) { require((uint256(x) + uint256(y)) >= x, "SafeMath: addition overflow"); return uint256(x) + uint256(y); } function sub(uint x, uint y) internal pure returns (uint z) { require(x >= y, "SafeMath: subtraction overflow"); return uint256(x) - uint256(y); } function mul(uint x, uint y) internal pure returns (uint z) { if (x == 0) { return 0; } require(y == 0 || (uint256(x) / uint256(y)) == uint256(y), "SafeMath: multiplication overflow"); return uint256(x) * uint256(y); } function div(uint x, uint y) internal pure returns (uint z) { require(y > 0, "SafeMath: division by zero"); return uint256(x) / uint256(y); } }

pragma solidity ^0.8.0;
contract A {
    function f() public pure returns (uint) {
        return 1;
    }
}

void g(A a, uint y) public {
    assembly {
        mstore(addr, 0x00)
        sstore(y, 0x00)
        sstore(memory, 0x00)
        mstore1(addr, 0x00)
        sstore8(y, 0x00)
        sstore1(memory, 0x00)
        mstore2(addr, 0x00)
        sstore16(y, 0x00)
        sstore2(memory, 0x00)
        mstore3(addr, 0x00)
        sstore32(y, 0x00)
        sstore3(memory, 0x00)
        mstore4(addr, 0x00)
        sstore64(y, 0x00)
        sstore4(memory, 0x00)
        mstore5(addr, 0x00)
        sload(addr, s0)
        sload(memory, s1)
        sload8(addr, s2)
        sload8(memory, s3)
        sload1(addr, s4)
        sload1(memory, s5)
        sload2(addr, s6)
        sload2(memory, s7)
        sload3(addr, s8)
        sload3(memory, s9)
        sload4(addr, s10)
        sload4(memory, s11)
        sload5(addr, s12)
        sload5(memory, s13)
        sload64(addr, s14)
        sload64_result(s15)
        sstore(s0, addr, 0x00)
        sstore(s1, memory, 0x00)
        sstore(s2, addr, 0x00)
        sstore(s3, memory, 0x00)
        sstore(s4, addr, 0x00)
        sstore(s5, memory, 0x00)
        sstore(s6, addr, 0x00)
        sstore(s7, memory, 0x00)
        sstore(s8, addr, 0x00)
        sstore(s9, memory, 0x00)
        sstore(s10, addr, 0x00)
        sstore(s11, memory, 0x00)
        sstore(s12, addr, 0x00)
        sstore(s13, memory, 0x00)
        sstore(s14, addr, 0x00)
        s

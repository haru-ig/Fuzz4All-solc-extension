pragma solidity ^0.8.0;
contract TestMutated729 {
    function mul(uint x, uint y) public pure returns (uint160) {
        uint160 z0 = 0;
        uint y0 = uint(y);
        if (y1 < 0) {
            uint160 z1 = mul(z1, x);
        } else {
            uint160 z1 = mul(z1, y);
        }
        uint160 z2 = 0;
        uint y3 = uint(y);
        if (y2 < 0) {
            uint160 z3 = mul(z3, x);
        } else {
            uint160 z3 = mul(z3, y);
        }
        uint160 z4 = y2 % x;
        uint160 z5 = 0;
        uint y6 = uint(y);
        if (y4 < 0) {
            uint160 z2 = mul(z2, x);
        } else {
            uint160 z2 = mul(z2, y);
        }
        uint160 z6 = 0;
        uint y7 = uint(y);
        if (y6 < 0) {
            uint160 z4 = mul(z4, x);
            uint160 z6 = z6 + mul(z6, x);
        } else {
            uint160 z4 = mul(z4, y);
            uint160 z6 = 0 + mul(z6, y);
        }
        uint160 z7 = 0;
        return z7;
    }
}
/* Please create a mutated program in a contract where the previous mutated program modifies code generated by the compiler. For example:
pragma solidity ^0.8.0;
contract TestMutated730 {
    using TestMutated729 for uint;
    uint x1;

    x1 = mul(mul(x1, 9), 16);
    x1 = mul(mul(x1, 9), 16);
    x1 = mul(mul(x1, 9), 16);

    uint y3 = 10;
    uint y2 = 0;
}

To be able to compile the below program, please make the TestMutated7

pragma solidity ^0.8.0;
contract first{
    uint a;
    uint b;
    uint c;
    uint d;
    uint e;
    uint f;
    uint g;
    uint h;
    uint i;
    uint j;
    constructor() public {
        check(5 < a);
        b = 1;
        c = 2;
        d -= 5;
        e -= 2;
        f -= 3;
        g = 4;
        h = 10;
        i -= 5;
        j -= 6;
    }
    function check(bool predicate) internal pure {
        assert(predicate);
    }
}
contract second{
    uint[] foo;
    uint a;
    uint b;
    uint c;
    uint d;
    uint e;
    bool f;
    uint g;
    uint h;
    uint i;
    uint j;
    uint k;
    uint l;
    uint m;
    uint n;
    uint o;
    uint p;
    uint q;
    uint r;
    uint s;
    uint t;
    uint u;
    uint v;
    uint w;
    uint x;
    uint y;
    uint z;
    uint aa;
    uint ab;
    uint ac;
    uint ad;
    uint ae;
    uint af;
    uint ag;
    uint ah;
    uint ai;
    uint aj;
    uint ak;
    uint al;
    uint am;
    uint an;
    uint ao;
    uint ap;
    uint aq;
    uint ar;
    uint as;
    uint at;
    uint au;
    uint av;
    uint aw;
    uint ax;
    uint ay;
    uint az;
    uint aaa;
    uint aab;
    uint aac;
    uint aad;
    uint aae;
    uint aaf;
    uint aag;
    uint aah;
    uint aii;
    uint ajj;
    uint aak;
    uint aal;
    uint aam;
    uint aan;
    uint aoo;
    uint aqp;
    uintaq;
    uintar;
    uintas

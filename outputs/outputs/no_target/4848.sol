pragma solidity ^0.8.0;
library B2 { function f(uint8 b) public pure returns (uint8) { return 128; } }
library B3 { function f(uint8 b) public pure returns (uint8) { B2 b2; return b2.f(b); } }
contract C { event E(string reason); function f1() public pure returns (uint8) { emit E("e"); return 128; } function f2() public pure returns (string memory) { emit E("e"); return "hello"; } function f3() public pure returns (int8) { emit E("e"); return -127; } function f4() public pure returns (uint160) { emit E("e"); return 10 ** 160; } function f5() public pure returns (bytes1) { emit E("e"); bytes b; return b; } function f6() public pure returns (uint) { emit E("e"); return 123.456 ** 0x800000000000000f; } function f7(uint r) public pure returns (uint) { emit E("e"); return r + 123; } function f8() public virtual returns (address,uint) { emit E("e"); C c; assembly { c := b23() } return (c,_); } function f9() public pure returns (uint[]) { emit E("e"); return [3,4]; } function f10() public pure returns (int128 c) { emit E("e"); c = -180.219 - 99999999*1973 * 3 * 4678 * (51291709*14543 * 187); } function f11() public pure returns (uint8 c) { c = -128; } function f12() public pure returns (uint8 r) { r = 128; } function f13() public pure returns (int16 s) { s = -128; } }

pragma solidity ^0.8.0;
contract Test {
    string public name;
    uint256 private _publicVariable;
    uint32 private _publicVariable2;
    uint31 private _publicVariable3;
    uint16 private _byteVariable;
    uint public _uint;
    uint public _uint256;
    uint public _uint32;
    uint public _uint31;
    bytes32 public _bytes32;
    mapping(address => uint) public _addressToTokenId;
    uint public _tokenId;
    uint public _uint16;
    uint public _uint8;
    uint public _uint4;
    uint public _uint3;
    uint256 public _uint252;
    uint public _uint64;
    uint512 public _uint254;
    uint49 public _uint128;
    uint24 public _int;
    int8 public _int8;
    int16 public _int16;
    int32 public _int32;
    int14 public _int14;
    int8 public _int5;
    int16 public _int20;
    int24 public _int24;
    address public _address;
    bytes4 public _bytes4;
    bytes4 public _bytes40;
    bytes5 public _bytes340;
    uint public _dataSize;
    bytes4 public _returnData4;
    bytes5 public _returnData5;
    bool public _bool;
    bool public _bool2;
    bool public _bool3;
    bool public _bool5;
    bool public _bool64;
    bool public _bool65;
    bool public _bool66;
    bool public _bool67;
    bool public _bool69;
    bool public _bool70;
    bool public _bool71;
    bool public _bool72;
    bool public _bool73;
    bool public _bool74;
    bool public _bool76;
    bool public _bool77;
    bool public _bool78;
    bool public _bool79;
    bool public _bool80;
    bool public _bool81;
    bool public _bool82;
    bool public _bool83;
    uint8 public _uint84;
    uint16 public _uint164;
    uint24 public _uint244;
    int8 public _int84;
    int16 public _int164;
    function Test(string memory _name) public {
        name = _name;
        _byteVariable = 5;
        _uint = 42;
        _uint256 = 42;
        _uint32 = 42;
        _uint31 = 42;
        _bytes32 = 42;
        _address = 42;

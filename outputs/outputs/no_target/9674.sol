pragma solidity ^0.8.0;
contract ERC20Basic { function totalSupply() view public returns (uint256 balance); function balanceOf(address who) view public returns (uint256 balance); function transfer(address to, uint256 value) returns (bool success); event Transfer(address indexed from, address indexed to, uint256 value); } contract ERC20 is ERC20Basic { function allowance(address owner, address spender) view public returns (uint256 remaining); function transferFrom(address from, address to, uint256 value) returns (bool success); function approve(address spender, uint256 value) returns (bool success); event Approval(address indexed owner, address indexed spender, uint256 value); } contract StandardToken is ERC20, Ownable { string public name; string public symbol; uint8 public decimals; constructor () { name = "ERC20Token"; symbol = "ERC"; decimals = 18; } function approve(address spender, uint256 value) public returns (bool) { allowed[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return true; } function transferFrom(address from, address to, uint256 value) public returns (bool success) { allowed[from][msg.sender] = allowed[from][msg.sender].sub(value); if (value > 0) balances[to] = balances[to].add(value); emit Transfer(from, to, value); return true; } function increaseApproval(address spender, uint256 addedValue) public returns (bool success) { allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue); emit Approval(msg.sender, spender, allowed[msg.sender][spender]); return true; } function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool success) { uint256 oldValue = allowed[msg.sender][spender]; if (subtractedValue > oldValue) { allowed[msg.sender][spender] = 0; } else { allowed[msg.sender][spender] = oldValue.sub(subtractedValue); } emit Approval(msg.sender, spender, allowed[msg.sender][spender]); return true; } uint256 public totalSupply; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; }

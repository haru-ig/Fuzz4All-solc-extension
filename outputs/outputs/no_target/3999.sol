pragma solidity ^0.8.0;
 interface I {
    function f() external;
 } contract C { address x; mapping(address => bool) public p; function f() public { bytes memory bytesarray = new bytes256(0x20); I memory i = (I(bytesarray))); I(bytesarray); i.f(); } function f21() public { bytes memory bytesarray = new bytes256(0x20); address addressarray = new address256([i]); I memory i = (I(addressarray)); i.f(); } function f22() public { bytes memory bytesarray = new bytes256(0x20); bytes memory bytesarray2 = (bytes128({ length: 32 })); I memory i = (I(bytesarray2)); i; i.f(); I(bytesarray); I(bytesarray2); } function f23() public { bytes memory bytesarray = new bytes4(0x20); I memory i = (I(bytes4(0x10))); I(bytesarray); i.f(); } function f25() public { bytes memory bytesarray = new bytes4(0x20); bytes memory bytesarray2 = (bytes128({ length: 32 })); I memory i = (I(bytesarray2)); I(bytesarray); I(bytesarray2); i.f(); } function f30() public { bytes memory bytesarray = new bytes4(0x20); bytes memory bytesarray2 = (bytes128({ length: 32 })); address addressarray = new address256([i]); I memory i = (I(bytesarray2)); i; i.f(); I(bytesarray); I(bytesarray2); } function m4(address _x, uint8[] memory _c, bytes memory _g) public { C(address(_x)).p[_x] = true; } function f4() public { bytes memory bytesarray = new bytes32(0x20); bool memory boolarray = (true); I memory i; bool memory boolarray2 = (true); uint8 memory uintarray = 663; uint8 memory uintarray2 = 4095; bytes32 memory bytesarray3 = bytes32(uintarray); bytes32 memory bytesarray4 = bytes32(uintarray2); uint2 uint2pointer = uint2(uintarray); bytes32 memory bytesarray5 = bytes32(uint2pointer); bytes32 memory bytesarray6 = bytes32(uintarray2); bytes32 memory bytesarray7 = bytes32(uintarray2); uint256 uint256pointer = uint256(uintarray); bytes32 memory bytesarray8 = bytes32(uint256pointer); bytes32 memory bytesarray9 = bytes32(uint

pragma solidity ^0.8.0;
library SemanticEquality_ArrayMutations19_rewritten3{
    uint[] x;
    function test() private pure {
        uint x2 = 0;
        uint[] memory x3 = new uint[](x.length + 1);
        uint[] memory x4;
        x4 = new uint[](x3.length + 1);
        uint[] memory x5;
        x5 = new uint[](x4.length + 1);
        uint[] memory x6;
        x6 = new uint[](x5.length + 1);
        uint[] memory x7;
        uint[] memory x8;
        x8 = new uint[](x6.length + 1);
        uint x9;
        x9 = (x.length + 1) + x2;
        x8 = x5.concat(x8);
        x8 = x6.concat(x8);
        x6.length = 10;
        x4.length = 10;
        x3.length = 10;
        x2 = 2 + null;
        x2 = 2 + x3;
        x2 = 2 + x4;
        x3 = x.concat(x8);
        x3.length = 5;
        x2 = x3;
        x2 = 6 + null;
        x5 = x3.concat(x4);
        x4.length = 5;
        x = x5.concat(x6);
        x4.length = 2;
        x = x.concat(x7);
        x2 = (x.length + 1) + x2;
        x2 = x7.concat(x4);
        x = (x5.concat(x).concat(x6.concat(x4)).concat(x7)).concat(x);
        x4.length = 2;
        x = x.concat(x7);
        x2 = (x.length + 1) + x2;
        x2 = x7.concat(x4);
        x4.length = 2;
        x = (x5.concat(x).concat(x6.concat(x4)).concat(x7)).concat(x);
        x3.length = 2;
        x2 = x3;
        x2 = x7.concat(x4);
        if(x.length == 2) {
            x4.length = 1;
            x5 = x3.concat(x4);
            x3 = x.concat(x);
            x4.length

pragma solidity ^0.8.0;
contract good1 {
	function bad1(s memory a) {
		address[] memory c = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address[] memory d = new address[](0);
		address

pragma solidity ^0.8.0;
contract T8FA_mutator_3 {
    using T8FA_mutator_0xd mutator0;
    mutator0.
    uint256 a;
    uint256 b;
    uint256 aa;
    uint256 a2;
    uint256 a3;
    uint256 a4;
    uint256 a6;
    uint256 a7;
    uint256 a9;
    uint256 a10;
    uint256 a12;
    uint256 a31;
    function h(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) public {
        mutator0.a11 ++;
        mutator0.a12--;
        mutator0.a31 *=10;
        mutator0.a10 += 10;
        mutator0.a12 += 5;
        a3 *= 10;
        a = 1;
        aa += a;
        aa -= b;
        aa = aa + aa;
        a2 = aa ^ aa + b;
        aa *= 7;
        i = 2;
        a = mutator0.a1 / 10;
        i = i / 10;
        a -= mutator0.a2;
        a += i8;
        uint256 j = mutator0.a3;
        i8 -= a;
        i6 += j;
        a >>= 10;
        uint256 k = a;
        a3 >>= k;
        uint256 l = k & 3;
        a3 = a3 + a + k;
        a >>= a;
        a = a ^ mutator0.i8;
        a3 += i >> 10;
        a += k;
        a11 += a;
        a6 += mutator0.i8;
        i8 *= 18;
        k <<= a;
        uint256 m = 2;
        a11 = a11 + mutator0.a6;
        i6 = a6 - aa;
        aa <<= a3;
        bool x = m < a4;
        a14 *= 6;
        i6 += k;
        a2 -= i6;
        a +=

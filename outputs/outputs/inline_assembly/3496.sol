pragma solidity ^0.8.0;
contract SemanticallyEquivalentContract {
    uint constant ZERO = 0;
    uint constant ONE = 1;
    uint constant TWO = 2;
    modifier onlyUpdate (uint256 _oldValue) {
        assert(uint256(msg.sender) == _oldValue);
        assert(_oldValue + ONE == ZERO);
        _oldValue += 2;
        assert(_oldValue == TWO);
        _oldValue -= 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue -= ONE;
        assert(_oldValue == ONE);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue -= ONE;
        assert(_oldValue == ZERO);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        _oldValue += 2;
        assert(_oldValue == TWO);
        _oldValue -= 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ZERO);
        _oldValue += 3;
        assert(_oldValue == ZERO);
        _oldValue += 3;
        assert(_oldValue == ZERO);
        _oldValue += 3;
        assert(_oldValue == ZERO);
        _oldValue += ONE;
        assert(_oldValue == ONE);
        _oldValue += ONE;
        _oldValue += ONE;
        _oldValue += ONE;
        assert(_oldValue == TWO);
        _oldValue -= 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue += 3;
        assert(_oldValue == ONE);
        _oldValue

pragma solidity ^0.8.0;
contract ChangeGenerationsUsingYulWithoutSemantics {
    address public a;
    address public b;
    address public c;
    address public d;
    address public e;
    address public f;
    function change2 (address v) public {
    b = address(1);
    b = address(2);
    b = address(b);
    b = address(b);
    b = address(b);
    b = f;
    b = f;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b; a = a;
    c = c;
    d = d;
    e = e;
    f = f;
    a = address(1);
    a = address(2);
    a = address(a);
    a = address(a);
    a = address(a);
    a = address(a);
    a = a;
    a = a;
    a = a;
    a = a;
    a = a;
    a = a;
    c = address(1);
    c = address(2);
    c = address(c);
    c = address(c);
    c = address(c);
    c = address(c);
    c = a;
    b = address(1);
    b = address(2);
    b = address(b);
    b = address(b);
    b = address(b);
    b = address(b);
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    b = b;
    a = a;
    c = c;
    d = d;
    e = e;
    f = f;
    a = address(1);
    a = address(2);
    a = address(a);
    a = address(a);
    a = address(a);
    a = address(a);
    a = a;
    a = a;
    a = a;
    a = a;
    a = a;

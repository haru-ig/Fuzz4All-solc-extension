pragma solidity ^0.8.0;
contract Test {
    address _addressOne;
    uint _amountOne;
    uint256[] memory _amounts;
    bytes private _data1;
    bytes private _data2;
    bytes private _data3;
    bytes private _data4Bytes1;
    bytes private _data4Bytes2;
    bytes private _data4Bytes3;
    bytes1 private _data1Byte;
    bytes1 private _data2Byte;
    bytes1 private _data2Bytes1;
    bytes1 private _data2Bytes2;
    bytes1 private _data2Bytes3;
    bytes2 private _data2Word;
    bytes2 private _data2Words1;
    bytes2 private _data2Words2;
    bytes2 private _data2Words3;
    bytes3 private _data2Word3;
    bytes3 private _data2Words3;
    bytes3 private _data2Words4;
    bytes3 private _data2Words5;
    bytes3 private _data2Words6;
    bytes32 private _data2DWord;
    bytes32 private _data2DDWords1;
    bytes32 private _data2DDWords2;
    bytes32 private _data2DDWords3;
    bytes32 private _data2DWord4;
    bytes32 private _data2DDWords4;
    bytes32 private _data2DDWords5;
    bytes32 private _data2DDWords6;
    bytes32 private _data64Dwords;
    bytes32 private _data32Dwords;
    bytes32 private _data32DDWords;
    bytes32 private _dataDwords;
    mapping(address => uint) private _balances;
    mapping(address => mapping(address => uint)) private _allowances;
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    constructor() public {
        _addressOne = msg.sender;
        _amountOne = 123;
        _data1 = "Hello!";
        address payable payablePayer = payable(_addressOne);
        _data1Byte = bytes1(0x1);
        _data2 = bytes("Data!");
        _data2Bytes1 = bytes1(0x2);
        bytes2 words1 = 0x1239;
        bytes2 words2 = 0xaa;
        uint32 dWords3 = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffee;
        bytes3 dWords32 = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee;
        uint64 dwords4 = 0xdddddddddddddddddddddddddddddddddddddddddddddddddddddddddd;
        uint64[] memory dwords5 = new uint64[](3);
        uint64[][] memory ddwords6 = new uint64[5][];
        ddwords6[1] =
